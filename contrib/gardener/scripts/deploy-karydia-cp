#!/bin/bash
#
# Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -euo pipefail

readonly namespace="${NAMESPACE:-}"
readonly clustername="${CLUSTERNAME:-}"
readonly podcidr="${PODCIDR:-}"
readonly nodecidr="${NODECIDR:-}"
readonly restrictedendpointcidr="${RESTRICTEDENDPOINTCIDR:-}"

if [[ -z "${namespace}" ]]; then
  echo "ERROR: unknown shoot namespace - aborting" >&2
  echo "export NAMESPACE=shoot--foo--bar" >&2
  exit 1
fi

if [[ -z "${clustername}" ]]; then
  echo "ERROR: unknown shoot clustername - aborting" >&2
  echo "export CLUSTERNAME=shoot--foo--bar" >&2
  exit 1
fi

if [[ -z "${podcidr}" ]]; then
  echo "ERROR: unknown shoot pod cidr - aborting" >&2
  echo "export PODCIDR=100.96.0.0/24" >&2
  exit 1
fi

if [[ -z "${nodecidr}" ]]; then
  echo "ERROR: unknown shoot node cidr - aborting" >&2
  echo "export NODECIDR=10.250.0.0/16" >&2
  exit 1
fi

if [[ -z "${restrictedendpointcidr}" ]]; then
  echo "ERROR: unknown shoot restricted cidr - aborting" >&2
  echo 'export RESTRICTEDENDPOINTCIDR='\''{"10.242.0.0/16", "10.243.0.0/16", "169.254.169.254/32"}'\''' >&2
  exit 1
fi

kubemgmt_kubeconfig_bundle="$(cat kubemgmt-cp.kubeconfig | base64 | tr -d '\r\n')"
if [[ -z "${kubemgmt_kubeconfig_bundle}" ]]; then
  echo "ERROR: kube-mgmt kubeconfig not found - aborting" >&2
  exit 1
fi

karydia_kubeconfig_bundle="$(cat karydia-cp.kubeconfig | base64 | tr -d '\r\n')"
if [[ -z "${karydia_kubeconfig_bundle}" ]]; then
  echo "ERROR: karydia kubeconfig not found - aborting" >&2
  exit 1
fi

cmd=apply
if [[ "$@" == "delete" ]]; then
  cmd=delete
fi

sed \
	-e "s|{{KUBEMGMT_KUBECONFIG_BUNDLE}}|${kubemgmt_kubeconfig_bundle}|g" \
	-e "s|{{KARYDIA_KUBECONFIG_BUNDLE}}|${karydia_kubeconfig_bundle}|g" \
	-e "s|{{NAMESPACE}}|${namespace}|g" \
	-e "s|{{CLUSTERNAME}}|${clustername}|g" \
	-e "s|{{PODCIDR}}|${podcidr}|g" \
	-e "s|{{NODECIDR}}|${nodecidr}|g" \
	-e "s|{{RESTRICTEDENDPOINTCIDR}}|${restrictedendpointcidr}|g" \
	<<EOF | kubectl ${cmd} -n ${namespace} -f -

apiVersion: v1
kind: Secret
metadata:
  name: kube-mgmt-kubeconfig
  namespace: {{NAMESPACE}}
type: Opaque
data:
  kubeconfig: {{KUBEMGMT_KUBECONFIG_BUNDLE}}

---

apiVersion: v1
kind: Secret
metadata:
  name: karydia-kubeconfig
  namespace: {{NAMESPACE}}
type: Opaque
data:
  kubeconfig: {{KARYDIA_KUBECONFIG_BUNDLE}}

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: karydia
  namespace: {{NAMESPACE}}
  labels:
    app: karydia
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: karydia
    spec:
      serviceAccount: default
      automountServiceAccountToken: false
      containers:
      - name: karydia
        # TODO: Add version number
        image: eu.gcr.io/gardener-project/karydia/karydia
        imagePullPolicy: Always
        command:
          - karydia
          - runserver
          - --kubeconfig
          - /etc/karydia/kubeconfig/kubeconfig
          - --tls-cert
          - /etc/karydia/tls/cert.pem
          - --tls-key
          - /etc/karydia/tls/key.pem
        volumeMounts:
          - name: karydia-tls
            mountPath: /etc/karydia/tls
          - name: karydia-kubeconfig
            mountPath: /etc/karydia/kubeconfig
        livenessProbe:
          httpGet:
            path: /healthz
            port: 33333
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
          failureThreshold: 2
        ports:
        - containerPort: 33333
      - name: kube-mgmt
        image: openpolicyagent/kube-mgmt:0.7
        imagePullPolicy: Always
        args:
          - "--kubeconfig=/var/lib/kube-mgmt/kubeconfig"
          - "--replicate-cluster=v1/nodes"
          - "--replicate-cluster=v1/namespaces"
          - "--replicate-cluster=admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations"
          - "--replicate-cluster=admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations"
          - "--replicate=v1/persistentvolumes"
          - "--replicate=v1/pods"
          - "--replicate=v1/endpoints"
        volumeMounts:
        - mountPath: /var/lib/kube-mgmt
          name: kube-mgmt-kubeconfig
      volumes:
        - name: karydia-tls
          secret:
            secretName: karydia-tls
        - name: kube-mgmt-kubeconfig
          secret:
            defaultMode: 420
            secretName: kube-mgmt-kubeconfig
        - name: karydia-kubeconfig
          secret:
            defaultMode: 420
            secretName: karydia-kubeconfig

---

apiVersion: v1
kind: Service
metadata:
  name: karydia
  namespace: {{NAMESPACE}}
  labels:
    app: karydia
spec:
  ports:
  - port: 443
    targetPort: 33333
  selector:
    app: karydia

---

apiVersion: extensions/v1beta1
kind: NetworkPolicy
metadata:
  name: kube-apiserver-karydia
  namespace: {{NAMESPACE}}
spec:
  egress:
  - ports:
    - port: 33333
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          app: karydia
  podSelector:
    matchLabels:
      app: kubernetes
      role: apiserver
  policyTypes:
  - Egress

EOF
