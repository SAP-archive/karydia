#!/bin/bash

# Copyright (C) 2019 SAP SE or an SAP affiliate company. All rights reserved.
# This file is licensed under the Apache Software License, v. 2 except as
# noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Parameter(s)
if [[ -z "$1" ]]
then
  echo "Usage: $0 USERNAME"
  exit 1
fi
user=$1
outdir=./.user.kube
echo 'Execution...'
echo

# Collect cluster information
context=$(kubectl config current-context)
cluster=$(kubectl config view -o jsonpath="{.contexts[?(@.name==\"${context}\")].context.cluster}")
server=$(kubectl config view -o jsonpath="{.clusters[?(@.name==\"${cluster}\")].cluster.server}")
usrctx="${context}-user-${user}"

# Create project namespace (example)
namespace='production'
kubectl create namespace "${namespace}"

# Create & collect user information
cacrtfile=${outdir}/${usrctx}.ca.crt
mkdir -p ${outdir}
kubectl -n "${namespace}" create serviceaccount "${user}"
secret=$(kubectl -n "${namespace}" get serviceaccount "${user}" -o jsonpath='{.secrets[0].name}')
token=$(kubectl -n "${namespace}" get secret "${secret}" -o jsonpath='{.data.token}' | base64 --decode)
kubectl -n "${namespace}" get secret "${secret}" -o jsonpath='{.data.ca\.crt}' | base64 --decode > ${cacrtfile}

# Restrict user's permissions (example)
cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: core-developer
rules:
- apiGroups: [""]
  resources: ["configmaps", "events", "limitranges", "persistentvolumeclaims", "persistentvolumes", "pods", "podtemplates", "secrets", "services"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
EOF

cat <<EOF | kubectl create -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: ${namespace}
  name: develop-core
subjects:
- kind: ServiceAccount
  namespace: ${namespace}
  name: ${user}
roleRef:
  kind: ClusterRole
  name: core-developer
  apiGroup: rbac.authorization.k8s.io
EOF

# Create user's kubeconfig
kubeconfigfile=${outdir}/${usrctx}.kubeconfig
KUBECONFIG=${kubeconfigfile} kubectl config set-cluster "${cluster}" \
  --embed-certs=true \
  --certificate-authority="${cacrtfile}" \
  --server="${server}"
KUBECONFIG=${kubeconfigfile} kubectl config set-credentials "${usrctx}" \
  --token="${token}"
KUBECONFIG=${kubeconfigfile} kubectl config set-context "${usrctx}" \
  --cluster="${cluster}" \
  --namespace="${namespace}" \
  --user="${usrctx}"
KUBECONFIG=${kubeconfigfile} kubectl config use-context "${usrctx}"

# Clean up
rm -f ${cacrtfile}

echo
echo "Done. Test with:"
echo "export KUBECONFIG=${kubeconfigfile}"

