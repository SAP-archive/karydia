#!/bin/bash

# Copyright (C) 2019 SAP SE or an SAP affiliate company. All rights reserved.
# This file is licensed under the Apache Software License, v. 2 except as
# noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is only for development. It generates the dev deployment yaml with a dev container from the prod deployment yaml.
# This dev deployment yaml replaces the default deployment yaml and thus should ease and speed up (local) development.
# author: Jonas Zengerle

set -e

# Setup
PROD_IMAGE="$1"	# e.g. 'eu.gcr.io/gardener-project/karydia/karydia'
DEV_IMAGE="$2"	# e.g. 'eu.gcr.io/gardener-project/karydia/karydia-dev'
PROD_YAML='manifests/deployment.yml'
DEV_YAML='manifests-dev/deployment-dev.yml'
DEV_CMD_FIRST=(
  'hotswap-dev'
  '-r'
  "'dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec {{binPath}} --'"
  '--'
)
DEV_CMD_BIN_LOCATION='/usr/local/bin/'
CMD_MAIN_BIN='karydia'
ERR_MSG_PREFIX='ERROR'


# Check

## prod image and dev image need to be passed
[ -z "$PROD_IMAGE" ] || [ -z "$DEV_IMAGE" ] && \
  echo "$ERR_MSG_PREFIX Usage: $0 PROD_DOCKER_IMAGE DEV_DOCKER_IMAGE" >&2 && \
  exit 1

## yq must be available
! type 'yq' &> /dev/null && \
  echo "$ERR_MSG_PREFIX command not found: yq (https://github.com/mikefarah/yq)" >&2 && \
  exit 1


# Generate

## copy prod deployment yaml
cp -f "$PROD_YAML" "$DEV_YAML"

## loop through containers specified at deployment yaml
for ((i=0;;i++))
do

  ## get container image or break loop if no image found
  image=$(yq r "$DEV_YAML" "spec.template.spec.containers.$i.image")
  [ "$image" == 'null' ] && break

  ## change container specification to dev if image equals prod image
  if [[ "$image" == "$PROD_IMAGE"* ]]
  then
    yq w -i "$DEV_YAML" "spec.template.spec.containers.$i.image" -- "$DEV_IMAGE"		# set dev image
    cmd=$(yq r "$DEV_YAML" "spec.template.spec.containers.$i.command")				# get prod command list
    size="$(cat <<EOF | wc -l
$cmd
EOF
)"												# get size of prod command list
    yq d -i "$DEV_YAML" "spec.template.spec.containers.$i.command"				# delete prod command list
    cnt=1											# count written elements of additional dev command list
    for ((j=0;j<${#DEV_CMD_FIRST[*]};j++))							# loop through additional dev command elements
    do
      yq w -i "$DEV_YAML" "spec.template.spec.containers.$i.command.$((cnt-1))" -- \
        "${DEV_CMD_FIRST[$j]}"									# add command to dev command list
      ((cnt++))											# increase written elements counter
    done
    for ((j=0;j<$size;j++))									# loop through prod command list
    do
      c="$(cat <<EOF | yq r - $j
$cmd
EOF
)"												# get element of prod command list
      [ "$c" == "$CMD_MAIN_BIN" ] && c="$DEV_CMD_BIN_LOCATION$c"				# if element equals main binary add location
      yq w -i "$DEV_YAML" "spec.template.spec.containers.$i.command.$((j+cnt-1))" -- "$c"	# add command to dev command list
    done
    yq d -i "$DEV_YAML" "spec.template.spec.containers.$i.livenessProbe"			# delete liveness probe for dev
  fi
done

## yq uses yaml parser which strips single and double quotes (and comments), thus, the following step is needed to keep single quotes
## see https://github.com/mikefarah/yq/issues/19
## replace resulting tripple single quotes (''') with just one single quote (')
cat <<EOF > "$DEV_YAML" |
$(cat "$DEV_YAML" | sed -e "s|'''|'|g")
EOF

## success message
echo "Successfully generated '$DEV_YAML'"

