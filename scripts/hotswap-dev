#!/bin/bash
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is only for development. It (hot)swaps the main binary within a running dev container for a new binary.
# This new binary could be built locally and just copied to the dev container (e.g. with 'kubectl cp'). Afterwards this script kill(s) the running
# main binary process(es), replaces the main binary with the new one and starts it again.

set -e

# Setup
MAIN_BIN_PATH="$1"			# e.g. '/usr/local/bin/karydia'
WATCH_BIN_PATH="$1-dev"			# e.g. '/usr/local/bin/karydia-dev'
MAIN_BIN=$(basename "$MAIN_BIN_PATH")	# e.g. 'karydia'
WATCH_BIN=$(basename "$WATCH_BIN_PATH")	# e.g. 'karydia-dev'
LOG_MAIN="$MAIN_BIN.log"		# e.g. 'karydia.log'
LOG_SELF=$(basename "$0")'.log'		# e.g. 'hotswap-dev.log'
LOG_FORMAT='%-23s\t%-4s\t%-6s\t%-11s\t%-18s\t%-8s\n'
MAX_CYCLES=10


# Start

## run main binary in separate process with passed parameters (e.g. $2:'runserver', $3:'--tls-cert', ...) if main binary exists otherwise exit
[ -e "$MAIN_BIN_PATH" ] && (nohup "$MAIN_BIN_PATH" "${@:2}" > "$LOG_MAIN" &) || exit 1

## log activity to STDOUT and file
touch "$LOG_SELF"
echo "$MAIN_BIN_PATH ${@:2}" | tee "$LOG_SELF"
printf "\n$LOG_FORMAT" 'DATE' 'TYPE' 'USER' 'FILE' 'MESSAGE' 'EVENTS' | tee -a "$LOG_SELF"


# Watch

## listen on events in directory of watched file (e.g. '/usr/local/bin/')
inotifywait -q -m -e create,moved_to $(dirname "$WATCH_BIN_PATH") |
while read -r dir event file
do

  ## check if triggered event belongs to specific watched file
  if [ "$file" == "$WATCH_BIN" ]
  then
    msg=''; cnt=1

    ## wait till all processes (e.g. 'kubectl cp') freed watched file otherwise exit after some time
    while [[ "$(lsof | grep $WATCH_BIN_PATH)" != '' ]]; do sleep 1 && ((cnt++)) && ((cnt>$MAX_CYCLES+1)) && exit 1; done

    ## kill / send 'SIGTERM' to processes who are using main binary
    kill "$(pgrep $MAIN_BIN_PATH)" &> /dev/null || true

    msg+='killed'; cnt=1

    ## wait till all processes ended who used main binary otherwise exit after some time
    while [[ "$(lsof | grep $MAIN_BIN_PATH)" != '' ]]; do sleep 1 && ((cnt++)) && ((cnt>$MAX_CYCLES+1)) && exit 1; done

    ## set watched file as new main binary
    mv -f "$WATCH_BIN_PATH" "$MAIN_BIN_PATH"

    ## run main binary in separate process with passed parameters (e.g. $2:'runserver', $3:'--tls-cert', ...) if main binary exists otherwise exit
    [ -e "$MAIN_BIN_PATH" ] && (nohup "$MAIN_BIN_PATH" "${@:2}" > "$LOG_MAIN" &) || exit 1

    msg+=' & restarted'; cnt=1

    ## log activity to STDOUT and file
    touch "$LOG_SELF"
    printf "$LOG_FORMAT" "$(date +'%F %T %Z')" 'INFO' "$(whoami)" "$file" "$msg" "$event" | tee -a "$LOG_SELF"

  fi
done

