// Copyright (C) 2019 SAP SE or an SAP affiliate company. All rights reserved.
// This file is licensed under the Apache Software License, v. 2 except as
// noted otherwise in the LICENSE file.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/karydia/karydia/pkg/apis/karydia/v1alpha1"
	scheme "github.com/karydia/karydia/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// KarydiaNetworkPoliciesGetter has a method to return a KarydiaNetworkPolicyInterface.
// A group's client should implement this interface.
type KarydiaNetworkPoliciesGetter interface {
	KarydiaNetworkPolicies() KarydiaNetworkPolicyInterface
}

// KarydiaNetworkPolicyInterface has methods to work with KarydiaNetworkPolicy resources.
type KarydiaNetworkPolicyInterface interface {
	Create(*v1alpha1.KarydiaNetworkPolicy) (*v1alpha1.KarydiaNetworkPolicy, error)
	Update(*v1alpha1.KarydiaNetworkPolicy) (*v1alpha1.KarydiaNetworkPolicy, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.KarydiaNetworkPolicy, error)
	List(opts v1.ListOptions) (*v1alpha1.KarydiaNetworkPolicyList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.KarydiaNetworkPolicy, err error)
	KarydiaNetworkPolicyExpansion
}

// karydiaNetworkPolicies implements KarydiaNetworkPolicyInterface
type karydiaNetworkPolicies struct {
	client rest.Interface
}

// newKarydiaNetworkPolicies returns a KarydiaNetworkPolicies
func newKarydiaNetworkPolicies(c *KarydiaV1alpha1Client) *karydiaNetworkPolicies {
	return &karydiaNetworkPolicies{
		client: c.RESTClient(),
	}
}

// Get takes name of the karydiaNetworkPolicy, and returns the corresponding karydiaNetworkPolicy object, and an error if there is any.
func (c *karydiaNetworkPolicies) Get(name string, options v1.GetOptions) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	result = &v1alpha1.KarydiaNetworkPolicy{}
	err = c.client.Get().
		Resource("karydianetworkpolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of KarydiaNetworkPolicies that match those selectors.
func (c *karydiaNetworkPolicies) List(opts v1.ListOptions) (result *v1alpha1.KarydiaNetworkPolicyList, err error) {
	result = &v1alpha1.KarydiaNetworkPolicyList{}
	err = c.client.Get().
		Resource("karydianetworkpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested karydiaNetworkPolicies.
func (c *karydiaNetworkPolicies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("karydianetworkpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a karydiaNetworkPolicy and creates it.  Returns the server's representation of the karydiaNetworkPolicy, and an error, if there is any.
func (c *karydiaNetworkPolicies) Create(karydiaNetworkPolicy *v1alpha1.KarydiaNetworkPolicy) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	result = &v1alpha1.KarydiaNetworkPolicy{}
	err = c.client.Post().
		Resource("karydianetworkpolicies").
		Body(karydiaNetworkPolicy).
		Do().
		Into(result)
	return
}

// Update takes the representation of a karydiaNetworkPolicy and updates it. Returns the server's representation of the karydiaNetworkPolicy, and an error, if there is any.
func (c *karydiaNetworkPolicies) Update(karydiaNetworkPolicy *v1alpha1.KarydiaNetworkPolicy) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	result = &v1alpha1.KarydiaNetworkPolicy{}
	err = c.client.Put().
		Resource("karydianetworkpolicies").
		Name(karydiaNetworkPolicy.Name).
		Body(karydiaNetworkPolicy).
		Do().
		Into(result)
	return
}

// Delete takes name of the karydiaNetworkPolicy and deletes it. Returns an error if one occurs.
func (c *karydiaNetworkPolicies) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("karydianetworkpolicies").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *karydiaNetworkPolicies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("karydianetworkpolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched karydiaNetworkPolicy.
func (c *karydiaNetworkPolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	result = &v1alpha1.KarydiaNetworkPolicy{}
	err = c.client.Patch(pt).
		Resource("karydianetworkpolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
