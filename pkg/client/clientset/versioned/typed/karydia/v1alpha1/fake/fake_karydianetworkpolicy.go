// Copyright (C) 2019 SAP SE or an SAP affiliate company. All rights reserved.
// This file is licensed under the Apache Software License, v. 2 except as
// noted otherwise in the LICENSE file.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/karydia/karydia/pkg/apis/karydia/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKarydiaNetworkPolicies implements KarydiaNetworkPolicyInterface
type FakeKarydiaNetworkPolicies struct {
	Fake *FakeKarydiaV1alpha1
}

var karydianetworkpoliciesResource = schema.GroupVersionResource{Group: "karydia.gardener.cloud", Version: "v1alpha1", Resource: "karydianetworkpolicies"}

var karydianetworkpoliciesKind = schema.GroupVersionKind{Group: "karydia.gardener.cloud", Version: "v1alpha1", Kind: "KarydiaNetworkPolicy"}

// Get takes name of the karydiaNetworkPolicy, and returns the corresponding karydiaNetworkPolicy object, and an error if there is any.
func (c *FakeKarydiaNetworkPolicies) Get(name string, options v1.GetOptions) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(karydianetworkpoliciesResource, name), &v1alpha1.KarydiaNetworkPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KarydiaNetworkPolicy), err
}

// List takes label and field selectors, and returns the list of KarydiaNetworkPolicies that match those selectors.
func (c *FakeKarydiaNetworkPolicies) List(opts v1.ListOptions) (result *v1alpha1.KarydiaNetworkPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(karydianetworkpoliciesResource, karydianetworkpoliciesKind, opts), &v1alpha1.KarydiaNetworkPolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.KarydiaNetworkPolicyList{ListMeta: obj.(*v1alpha1.KarydiaNetworkPolicyList).ListMeta}
	for _, item := range obj.(*v1alpha1.KarydiaNetworkPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested karydiaNetworkPolicies.
func (c *FakeKarydiaNetworkPolicies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(karydianetworkpoliciesResource, opts))
}

// Create takes the representation of a karydiaNetworkPolicy and creates it.  Returns the server's representation of the karydiaNetworkPolicy, and an error, if there is any.
func (c *FakeKarydiaNetworkPolicies) Create(karydiaNetworkPolicy *v1alpha1.KarydiaNetworkPolicy) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(karydianetworkpoliciesResource, karydiaNetworkPolicy), &v1alpha1.KarydiaNetworkPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KarydiaNetworkPolicy), err
}

// Update takes the representation of a karydiaNetworkPolicy and updates it. Returns the server's representation of the karydiaNetworkPolicy, and an error, if there is any.
func (c *FakeKarydiaNetworkPolicies) Update(karydiaNetworkPolicy *v1alpha1.KarydiaNetworkPolicy) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(karydianetworkpoliciesResource, karydiaNetworkPolicy), &v1alpha1.KarydiaNetworkPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KarydiaNetworkPolicy), err
}

// Delete takes name of the karydiaNetworkPolicy and deletes it. Returns an error if one occurs.
func (c *FakeKarydiaNetworkPolicies) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(karydianetworkpoliciesResource, name), &v1alpha1.KarydiaNetworkPolicy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKarydiaNetworkPolicies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(karydianetworkpoliciesResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.KarydiaNetworkPolicyList{})
	return err
}

// Patch applies the patch and returns the patched karydiaNetworkPolicy.
func (c *FakeKarydiaNetworkPolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.KarydiaNetworkPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(karydianetworkpoliciesResource, name, data, subresources...), &v1alpha1.KarydiaNetworkPolicy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.KarydiaNetworkPolicy), err
}
